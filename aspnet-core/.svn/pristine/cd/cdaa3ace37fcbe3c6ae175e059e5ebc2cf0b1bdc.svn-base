

using System;
using System.Linq;
using System.Linq.Dynamic.Core;
using Abp.Linq.Extensions;
using System.Collections.Generic;
using System.Threading.Tasks;
using Abp.Domain.Repositories;
using ERP.Books.Exporting;
using ERP.Books.Dtos;
using ERP.Dto;
using Abp.Application.Services.Dto;
using ERP.Authorization;
using Abp.Extensions;
using Abp.Authorization;
using Microsoft.EntityFrameworkCore;

namespace ERP.Books
{
	[AbpAuthorize(AppPermissions.Pages_GLBOOKS)]
    public class GLBOOKSAppService : ERPAppServiceBase, IGLBOOKSAppService
    {
		 private readonly IRepository<GLBOOKS, int> _glbooksRepository;
		 private readonly IGLBOOKSExcelExporter _glbooksExcelExporter;
		 

		  public GLBOOKSAppService(IRepository<GLBOOKS, int> glbooksRepository, IGLBOOKSExcelExporter glbooksExcelExporter ) 
		  {
			_glbooksRepository = glbooksRepository;
			_glbooksExcelExporter = glbooksExcelExporter;
			
		  }

		 public async Task<PagedResultDto<GetGLBOOKSForViewDto>> GetAll(GetAllGLBOOKSInput input)
         {
			
			var filteredGLBOOKS = _glbooksRepository.GetAll()
						.WhereIf(!string.IsNullOrWhiteSpace(input.Filter), e => false  || e.BookName.Contains(input.Filter))
						.WhereIf(!string.IsNullOrWhiteSpace(input.BookNameFilter),  e => e.BookName.ToLower() == input.BookNameFilter.ToLower().Trim())
						.WhereIf(input.MinNormalEntryFilter != null, e => e.NormalEntry >= input.MinNormalEntryFilter)
						.WhereIf(input.MaxNormalEntryFilter != null, e => e.NormalEntry <= input.MaxNormalEntryFilter)
						.WhereIf(input.IntegratedFilter > -1,  e => Convert.ToInt32(e.Integrated) == input.IntegratedFilter )
						.WhereIf(input.MinSysDateFilter != null, e => e.SysDate >= input.MinSysDateFilter)
						.WhereIf(input.MaxSysDateFilter != null, e => e.SysDate <= input.MaxSysDateFilter)
						.WhereIf(input.MinDbIDFilter != null, e => e.DbID >= input.MinDbIDFilter)
						.WhereIf(input.MaxDbIDFilter != null, e => e.DbID <= input.MaxDbIDFilter)
						.WhereIf(input.MinRestrictedFilter != null, e => e.Restricted >= input.MinRestrictedFilter)
						.WhereIf(input.MaxRestrictedFilter != null, e => e.Restricted <= input.MaxRestrictedFilter);

			var pagedAndFilteredGLBOOKS = filteredGLBOOKS
                .OrderBy(input.Sorting ?? "id asc")
                .PageBy(input);

			var glbooks = from o in pagedAndFilteredGLBOOKS
                         select new GetGLBOOKSForViewDto() {
							GLBOOKS = new GLBOOKSDto
							{
                                BookID = o.BookID,
                                BookName = o.BookName,
                                NormalEntry = o.NormalEntry,
                                Integrated = o.Integrated,
                                SysDate = o.SysDate,
                                DbID = o.DbID,
                                Restricted = o.Restricted,
                                Id = o.Id
							}
						};

            var totalCount = await filteredGLBOOKS.CountAsync();

            return new PagedResultDto<GetGLBOOKSForViewDto>(
                totalCount,
                await glbooks.ToListAsync()
            );
         }
		 
		 public async Task<GetGLBOOKSForViewDto> GetGLBOOKSForView(int id)
         {
            var glbooks = await _glbooksRepository.GetAsync(id);

            var output = new GetGLBOOKSForViewDto { GLBOOKS = ObjectMapper.Map<GLBOOKSDto>(glbooks) };
			
            return output;
         }
		 
		 [AbpAuthorize(AppPermissions.Pages_GLBOOKS_Edit)]
		 public async Task<GetGLBOOKSForEditOutput> GetGLBOOKSForEdit(EntityDto<int> input)
         {
            var glbooks = await _glbooksRepository.FirstOrDefaultAsync(input.Id);
           
		    var output = new GetGLBOOKSForEditOutput {GLBOOKS = ObjectMapper.Map<CreateOrEditGLBOOKSDto>(glbooks)};
			
            return output;
         }

		 public async Task CreateOrEdit(CreateOrEditGLBOOKSDto input)
         {
            if(input.Id == 0){
				await Create(input);
			}
			else{
				await Update(input);
			}
         }

		 [AbpAuthorize(AppPermissions.Pages_GLBOOKS_Create)]
		 private async Task Create(CreateOrEditGLBOOKSDto input)
         {
            var glbooks = ObjectMapper.Map<GLBOOKS>(input);

			
			if (AbpSession.TenantId != null)
			{
				glbooks.TenantId = (int?) AbpSession.TenantId;
			}


            if (glbooks.Id ==null)
            {
                glbooks.Id =input.Id ;
            }

            await _glbooksRepository.InsertAsync(glbooks);
         }

		 [AbpAuthorize(AppPermissions.Pages_GLBOOKS_Edit)]
		 private async Task Update(CreateOrEditGLBOOKSDto input)
         {
            var glbooks = await _glbooksRepository.FirstOrDefaultAsync(input.Id);
             ObjectMapper.Map(input, glbooks);
         }

		 [AbpAuthorize(AppPermissions.Pages_GLBOOKS_Delete)]
         public async Task Delete(EntityDto<int> input)
         {
            await _glbooksRepository.DeleteAsync(input.Id);
         } 

		public async Task<FileDto> GetGLBOOKSToExcel(GetAllGLBOOKSForExcelInput input)
         {
			
			var filteredGLBOOKS = _glbooksRepository.GetAll()
						.WhereIf(!string.IsNullOrWhiteSpace(input.Filter), e => false   || e.BookName.Contains(input.Filter))
						.WhereIf(!string.IsNullOrWhiteSpace(input.BookNameFilter),  e => e.BookName.ToLower() == input.BookNameFilter.ToLower().Trim())
						.WhereIf(input.MinNormalEntryFilter != null, e => e.NormalEntry >= input.MinNormalEntryFilter)
						.WhereIf(input.MaxNormalEntryFilter != null, e => e.NormalEntry <= input.MaxNormalEntryFilter)
						.WhereIf(input.IntegratedFilter > -1,  e => Convert.ToInt32(e.Integrated) == input.IntegratedFilter )
						.WhereIf(input.MinSysDateFilter != null, e => e.SysDate >= input.MinSysDateFilter)
						.WhereIf(input.MaxSysDateFilter != null, e => e.SysDate <= input.MaxSysDateFilter)
						.WhereIf(input.MinDbIDFilter != null, e => e.DbID >= input.MinDbIDFilter)
						.WhereIf(input.MaxDbIDFilter != null, e => e.DbID <= input.MaxDbIDFilter)
						.WhereIf(input.MinRestrictedFilter != null, e => e.Restricted >= input.MinRestrictedFilter)
						.WhereIf(input.MaxRestrictedFilter != null, e => e.Restricted <= input.MaxRestrictedFilter);

			var query = (from o in filteredGLBOOKS
                         select new GetGLBOOKSForViewDto() { 
							GLBOOKS = new GLBOOKSDto
							{
                                BookID = o.BookID,
                                BookName = o.BookName,
                                NormalEntry = o.NormalEntry,
                                Integrated = o.Integrated,
                                SysDate = o.SysDate,
                                DbID = o.DbID,
                                Restricted = o.Restricted,
                                Id = o.Id
							}
						 });


            var glbooksListDtos = await query.ToListAsync();

            return _glbooksExcelExporter.ExportToFile(glbooksListDtos);
         }


    }
}