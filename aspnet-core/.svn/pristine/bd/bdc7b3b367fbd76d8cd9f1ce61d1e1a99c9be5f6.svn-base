

using System;
using System.Linq;
using System.Linq.Dynamic.Core;
using Abp.Linq.Extensions;
using System.Collections.Generic;
using System.Threading.Tasks;
using Abp.Domain.Repositories;
using ERP.SourceCode.Exporting;
using ERP.SourceCode.Dtos;
using ERP.Dto;
using Abp.Application.Services.Dto;
using ERP.Authorization;
using Abp.Extensions;
using Abp.Authorization;
using Microsoft.EntityFrameworkCore;

namespace ERP.SourceCode
{
	[AbpAuthorize(AppPermissions.Pages_GLSRCE)]
    public class GLSRCEAppService : ERPAppServiceBase, IGLSRCEAppService
    {
		 private readonly IRepository<GLSRCE> _glsrceRepository;
		 private readonly IGLSRCEExcelExporter _glsrceExcelExporter;
		 

		  public GLSRCEAppService(IRepository<GLSRCE> glsrceRepository, IGLSRCEExcelExporter glsrceExcelExporter ) 
		  {
			_glsrceRepository = glsrceRepository;
			_glsrceExcelExporter = glsrceExcelExporter;
			
		  }

		 public async Task<PagedResultDto<GetGLSRCEForViewDto>> GetAll(GetAllGLSRCEInput input)
         {
			
			var filteredGLSRCE = _glsrceRepository.GetAll()
						.WhereIf(!string.IsNullOrWhiteSpace(input.Filter), e => false  || e.SRCELEDGER.Contains(input.Filter) || e.SRCETYPE.Contains(input.Filter) || e.SRCEDESC.Contains(input.Filter))
						.WhereIf(!string.IsNullOrWhiteSpace(input.SRCELEDGERFilter),  e => e.SRCELEDGER.ToLower() == input.SRCELEDGERFilter.ToLower().Trim())
						.WhereIf(!string.IsNullOrWhiteSpace(input.SRCETYPEFilter),  e => e.SRCETYPE.ToLower() == input.SRCETYPEFilter.ToLower().Trim())
						.WhereIf(!string.IsNullOrWhiteSpace(input.SRCEDESCFilter),  e => e.SRCEDESC.ToLower() == input.SRCEDESCFilter.ToLower().Trim());

			var pagedAndFilteredGLSRCE = filteredGLSRCE
                .OrderBy(input.Sorting ?? "id asc")
                .PageBy(input);

			var glsrce = from o in pagedAndFilteredGLSRCE
                         select new GetGLSRCEForViewDto() {
							GLSRCE = new GLSRCEDto
							{
                                SRCELEDGER = o.SRCELEDGER,
                                SRCETYPE = o.SRCETYPE,
                                SRCEDESC = o.SRCEDESC,
                                Id = o.Id
							}
						};

            var totalCount = await filteredGLSRCE.CountAsync();

            return new PagedResultDto<GetGLSRCEForViewDto>(
                totalCount,
                await glsrce.ToListAsync()
            );
         }
		 
		 public async Task<GetGLSRCEForViewDto> GetGLSRCEForView(int id)
         {
            var glsrce = await _glsrceRepository.GetAsync(id);

            var output = new GetGLSRCEForViewDto { GLSRCE = ObjectMapper.Map<GLSRCEDto>(glsrce) };
			
            return output;
         }
		 
		 [AbpAuthorize(AppPermissions.Pages_GLSRCE_Edit)]
		 public async Task<GetGLSRCEForEditOutput> GetGLSRCEForEdit(EntityDto input)
         {
            var glsrce = await _glsrceRepository.FirstOrDefaultAsync(input.Id);
           
		    var output = new GetGLSRCEForEditOutput {GLSRCE = ObjectMapper.Map<CreateOrEditGLSRCEDto>(glsrce)};
			
            return output;
         }

		 public async Task CreateOrEdit(CreateOrEditGLSRCEDto input)
         {
            if(input.Id == null){
				await Create(input);
			}
			else{
				await Update(input);
			}
         }

		 [AbpAuthorize(AppPermissions.Pages_GLSRCE_Create)]
		 private async Task Create(CreateOrEditGLSRCEDto input)
         {
            var glsrce = ObjectMapper.Map<GLSRCE>(input);

			
			if (AbpSession.TenantId != null)
			{
				glsrce.TenantId = (int?) AbpSession.TenantId;
			}
		

            await _glsrceRepository.InsertAsync(glsrce);
         }

		 [AbpAuthorize(AppPermissions.Pages_GLSRCE_Edit)]
		 private async Task Update(CreateOrEditGLSRCEDto input)
         {
            var glsrce = await _glsrceRepository.FirstOrDefaultAsync((int)input.Id);
             ObjectMapper.Map(input, glsrce);
         }

		 [AbpAuthorize(AppPermissions.Pages_GLSRCE_Delete)]
         public async Task Delete(EntityDto input)
         {
            await _glsrceRepository.DeleteAsync(input.Id);
         } 

		public async Task<FileDto> GetGLSRCEToExcel(GetAllGLSRCEForExcelInput input)
         {
			
			var filteredGLSRCE = _glsrceRepository.GetAll()
						.WhereIf(!string.IsNullOrWhiteSpace(input.Filter), e => false  || e.SRCELEDGER.Contains(input.Filter) || e.SRCETYPE.Contains(input.Filter) || e.SRCEDESC.Contains(input.Filter))
						.WhereIf(!string.IsNullOrWhiteSpace(input.SRCELEDGERFilter),  e => e.SRCELEDGER.ToLower() == input.SRCELEDGERFilter.ToLower().Trim())
						.WhereIf(!string.IsNullOrWhiteSpace(input.SRCETYPEFilter),  e => e.SRCETYPE.ToLower() == input.SRCETYPEFilter.ToLower().Trim())
						.WhereIf(!string.IsNullOrWhiteSpace(input.SRCEDESCFilter),  e => e.SRCEDESC.ToLower() == input.SRCEDESCFilter.ToLower().Trim());

			var query = (from o in filteredGLSRCE
                         select new GetGLSRCEForViewDto() { 
							GLSRCE = new GLSRCEDto
							{
                                SRCELEDGER = o.SRCELEDGER,
                                SRCETYPE = o.SRCETYPE,
                                SRCEDESC = o.SRCEDESC,
                                Id = o.Id
							}
						 });


            var glsrceListDtos = await query.ToListAsync();

            return _glsrceExcelExporter.ExportToFile(glsrceListDtos);
         }


    }
}